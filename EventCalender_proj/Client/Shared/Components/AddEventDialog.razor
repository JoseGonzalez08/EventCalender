@using EventCalender_proj.Client.Shared;
@using EventCalender_proj.Client.Shared.Models;
@using EventCalender_proj.Client.Shared.Components;
@inject HttpClient Http;
@using MudBlazor

<MudDialog>
    <DialogContent>
        <AddEventComponent></AddEventComponent>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Style="background-color: black; color: white;" OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    // Cascading parameter to access the dialog instance
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    // Properties to store the form data
    DateTime? date;
    string description;
    string name;

    // Property to store the created event
    public EventClass model { get; set; }

    // Method to insert event data into the database
    public async Task InsertEventData()
    {
        // If date is null, use current date time.
        DateTime dateValue = date ?? DateTime.Now;

        // Create a new EventClass instance from the form data
        model = new EventClass
            {
                DateTime = dateValue,
                Description = description,
                Name = name
            };

        // Send a POST request to the API endpoint to insert the event data
        await Http.PostAsJsonAsync("/api/event", model);
    }

    // Method to handle the submit button click
    async void Submit()
    {
        // Call InsertEventData to insert the event data
        InsertEventData();

        // Close the dialog and pass the created event as the result
        MudDialog.Close(DialogResult.Ok(model));
    }

    // Method to handle the cancel button click
    void Cancel() => MudDialog.Cancel();
}
