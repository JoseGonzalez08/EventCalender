@page "/calendar"
@using EventCalender_proj.Client.Shared.Models;
@using MudBlazor;
@inject IDialogService DialogService;
@inject HttpClient Http; 
@using System.Collections.Generic;

<MudCard Class="m-4">
    <MudCardContent>
        <MudText Class="mb-2" Typo="Typo.h6">Name: @model.Name</MudText>
        <MudText Class="mb-2" Typo="Typo.body2">Date: @model.DateTime?.ToString("g")</MudText>
        <MudText Class="mb-4" Typo="Typo.body2">Description: @model.Description</MudText>
    </MudCardContent>
    <MudCardActions Class="justify-center">
        <MudButton Class="mr-2" Color="Color.Primary" Variant="Variant.Outlined" OnClick="DeleteEvent">Delete</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="() => EditEvent()">Edit</MudButton>
    </MudCardActions>
</MudCard>

@code {
        [Parameter]
        public EventClass model { get; set; }

        // Method to delete an event
        private async Task DeleteEvent()
        {
            // Make the API call to delete the event
            var response = await Http.DeleteAsync($"/api/event/{model.Id}");

            if (response.IsSuccessStatusCode)
            {
                // Show a dialog or some other notification to let the user know that the event was deleted successfully
                DialogService.ShowMessageBox("Success", "The event has been deleted successfully.");
            }
            else
            {
                // Show an error message
                DialogService.ShowMessageBox("Error", "An error occurred while trying to delete the event.");
            }
        }

        // Method to edit an event
        private void EditEvent()
        {
            // Create a new instance of DialogParameters, which will hold parameters to be passed to the dialog
            var parameters = new DialogParameters();

            // Add the `model` to the dialog parameters with the key "Event"
            // `model` is assumed to be a variable in your code representing the event to be edited
            parameters.Add("Event", model);

            // Create an instance of DialogOptions to customize the behavior and appearance of the dialog
            // Here, a close button is added to the dialog and its maximum width is set to extra small
            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            // Open the dialog using the DialogService. The dialog is of type `EditEventDialog`, it has the title "Edit Event", and
            // it receives the `parameters` object we just created. The `options` object is also passed to customize the dialog.
               DialogService.Show<EditEventDialog>("Edit Event", parameters, options);
        }
}
